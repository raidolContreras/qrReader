let html5QrcodeScanner;

function onScanSuccess(decodedText, decodedResult) {
    // Expresi√≥n regular para extraer la matr√≠cula
    const validQrRegex = /^https:\/\/sse\.unimontrer\.edu\.mx\/valides\.aspx\?matricula=(\d+)$/;
    const match = decodedText.match(validQrRegex);

    if (match) {
        let matricula = match[1]; // Extrae solo el n√∫mero de matr√≠cula
        // ‚úÖ QR v√°lido
        $("#qr-result").html(`<span style="color: green;">‚úÖ Matr√≠cula: ${matricula}</span>`);
        console.log(`Matr√≠cula detectada: ${matricula}`);

        // Simular clic en el bot√≥n "Detener escaneo" (sin detener el esc√°ner completamente)
        let stopButton = $("#html5-qrcode-button-camera-stop");
        if (stopButton.length) {
            stopButton.click();
        } else {
            console.warn("El bot√≥n 'Stop Scanning' no se encontr√≥.");
        }
    } else {
        // ‚ùå QR inv√°lido: continuar escaneando
        $("#qr-result").html('<span style="color: red;">‚ùå El QR no es correcto</span>');
        console.warn("QR inv√°lido detectado:", decodedText);
    }
}

function onScanFailure(error) {
    // Mostrar mensaje de error al usuario
    $("#qr-result").html('<span style="color: orange;">‚ö†Ô∏è Error de escaneo. Ajusta la iluminaci√≥n o enfoca mejor.</span>');
    // console.warn(`Error de escaneo: ${error}`);
}

function initializeScanner() {
    // Configuraci√≥n avanzada
    const config = {
        fps: 30, // Tasa de fotogramas por segundo
        qrbox: (viewfinderWidth, viewfinderHeight) => {
            const minSize = Math.min(viewfinderWidth, viewfinderHeight);
            return { width: minSize * 0.8, height: minSize * 0.8 }; // Tama√±o del √°rea de escaneo
        },
        videoConstraints: {
            facingMode: "environment", // Usar la c√°mara trasera
            advanced: [
                { focusMode: "continuous" }, // Enfoque continuo
                { exposureMode: "continuous" }, // Exposici√≥n continua
                { whiteBalanceMode: "continuous" } // Balance de blancos continuo
            ],
        },
        supportedScanTypes: [Html5QrcodeScanType.SCAN_TYPE_CAMERA], // Solo escaneo por c√°mara
    };

    // Inicializa el esc√°ner con la configuraci√≥n
    html5QrcodeScanner = new Html5QrcodeScanner("reader", config, false);
    html5QrcodeScanner.render(onScanSuccess, onScanFailure);

    // Mostrar mensaje inicial
    $("#qr-result").html('<span style="color: blue;">üîç Escaneando... Enfoca el c√≥digo QR.</span>');
    $("#qr-result").show(); // Mostrar el √°rea de resultados
    $("#reader").show(); // Mostrar el esc√°ner
    $("#start").hide(); 
}

// Bot√≥n para iniciar escaneo
$("#start").click(async () => {
    if (!html5QrcodeScanner) {
        initializeScanner(); // Inicializa el esc√°ner si no est√° inicializado

    } else {
        // Reiniciar el esc√°ner si ya est√° inicializado
        html5QrcodeScanner.clear(); // Limpiar el esc√°ner actual
        initializeScanner(); // Volver a inicializar
    }
});

// Habilitar tap-to-focus manual (opcional)
function enableTapToFocus(videoElement) {
    $(videoElement).on("click", async (event) => {
        if (videoElement && videoElement.srcObject) {
            const track = videoElement.srcObject.getVideoTracks()[0];
            const capabilities = track.getCapabilities();
            // Verifica si el enfoque manual es soportado
            if (capabilities.focusMode && capabilities.focusMode.includes("manual")) {
                try {
                    const rect = videoElement.getBoundingClientRect();
                    const x = (event.clientX - rect.left) / rect.width;
                    const y = (event.clientY - rect.top) / rect.height;
                    // Configura el punto de enfoque
                    await track.applyConstraints({
                        advanced: [
                            {
                                focusMode: "manual",
                                focusPointX: x,
                                focusPointY: y,
                            },
                        ],
                    });
                    $("#qr-result").html('<span style="color: blue;">üëÜ Enfocando...</span>');
                    console.log(`Autoenfoque aplicado en: (${x}, ${y})`);
                } catch (error) {
                    console.error("Error al aplicar el autoenfoque:", error);
                    $("#qr-result").html('<span style="color: orange;">‚ö†Ô∏è Error al enfocar. Intenta de nuevo.</span>');
                }
            } else {
                console.warn("El enfoque manual no es compatible con esta c√°mara.");
                $("#qr-result").html('<span style="color: orange;">‚ö†Ô∏è Enfoque manual no disponible.</span>');
            }
        }
    });
}

$(document).ready(() => {
    // Habilitar tap-to-focus (opcional)
    const observer = new MutationObserver(() => {
        const videoElement = $("#reader video").get(0);
        if (videoElement) {
            enableTapToFocus(videoElement);
            observer.disconnect();
        }
    });
    observer.observe(document.getElementById("reader"), { childList: true, subtree: true });
});